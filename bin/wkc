#! /usr/bin/env node
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
function printTabs(nbr) {
    var str = '';
    for (var i = 0; i < nbr; i++)
        str += '\t';
    return (str);
}

function epurString(str) {
    return str.replace(/^\s*$/, '');
}

function sanitize(str) {
    var res = '';

    str.split('\n').forEach(function (itm, idx, col) {
        if (!((idx == 0 || idx == col.length - 1) && epurString(itm) == ''))
            res += itm + '\n';
    });
    return (res);
}

function printHintErrors(errors, location) {
    console.log('\n#### -- ERRORS in file <' + location.file + '> -- ####');
    errors.forEach(function (itm) {
        console.log(itm.id, itm.code, itm.reason, 'in file', '<' + location.file + '>', '(' + (location.line + itm.line) + ', ' + itm.character + ')');
    });
    console.log();
}

var Webkool;
(function (Webkool) {
    'use strict';

    /*
    ** Template and Css Engine
    */
    var version = '0.1.6';

    var templateEngine = {
        'square': require('../lib/square'),
        'mustache': require('../lib/mustache')
    };

    var styleSheetEngine = {
        'css': '',
        'less': require('../lib/less'),
        'sass': require('../lib/sass')
    };

    /*
    **	require
    */
    var expat = require('node-expat');
    var sm = require('source-map');
    var sbuff = require('stream-buffers');
    var hint = require('jshint').JSHINT;
    var fs = require('fs');

    var outputJS, outputCSS, options = {
        client: false,
        server: false,
        target: {},
        includes: [__dirname + '/../lib/client/', './'],
        inputs: [],
        output: ''
    };

    var SideType;
    (function (SideType) {
        SideType[SideType["BOTH"] = 0] = "BOTH";
        SideType[SideType["SERVER"] = 1] = "SERVER";
        SideType[SideType["CLIENT"] = 2] = "CLIENT";
    })(SideType || (SideType = {}));
    ;

    /*
    **	BufferManager
    */
    var BufferManager = (function () {
        function BufferManager() {
            this.buffers = [];
        }
        BufferManager.prototype.newBuffer = function (neededSide, name) {
            this.buffers.push({
                'name': name,
                'side': neededSide,
                'data': []
            });
        };

        BufferManager.prototype.get = function (side, name, create) {
            for (var i = 0; i < this.buffers.length; i++) {
                if (this.buffers[i].name == name && this.buffers[i].side == side)
                    return (this.buffers[i]);
            }
            if (create) {
                this.newBuffer(side, name);
                return (this.get(side, name, false));
            }
            return (undefined);
        };

        BufferManager.prototype.write = function (side, name, data, info, split) {
            if (side == SideType.BOTH) {
                this.write(SideType.SERVER, name, data, info, split);
                this.write(SideType.CLIENT, name, data, info, split);
            } else {
                // if info == null, the chunk will be not add to the source map
                var buff = this.get(side, name, true);

                if (split == true) {
                    data.split('\n').forEach(function (itm, idx, col) {
                        var infoTmp = {
                            line: info.line + idx,
                            col: info.col,
                            file: info.file
                        };

                        if ((idx == 0 || idx == col.length - 1) && epurString(itm) == '')
                            infoTmp = null;

                        buff.data.push({
                            data: itm + '\n',
                            info: infoTmp
                        });
                    });
                } else {
                    buff.data.push({
                        data: data,
                        info: info
                    });
                }
            }
        };

        BufferManager.prototype.getBuffers = function () {
            return (this.buffers);
        };

        BufferManager.prototype.exec = function (side, name, callback) {
            callback(this.get(side, name, false));
        };

        BufferManager.prototype.copy = function (other) {
            this.buffers = other.getBuffers();
        };

        BufferManager.prototype.insert = function (side, name, elm, info) {
            var buff = this.get(side, name, true);
            buff.data.push({
                data: elm,
                info: info
            });
        };

        BufferManager.prototype.merge = function (side, other, info) {
            if (side == SideType.BOTH) {
                this.merge(SideType.SERVER, other, info.line);
                this.merge(SideType.CLIENT, other, info.line);
            } else {
                var buff = other.getBuffers();

                for (var i = 0; i < buff.length; i++) {
                    if (buff[i].side == side || buff[i].side == SideType.BOTH) {
                        this.insert(side, buff[i].name, buff[i].data, info);
                    }
                }
            }
        };

        BufferManager.prototype.profoundToSourceMap = function (map, line, elm) {
            for (var i = 0; i < elm.length; i++) {
                var itm = elm[i];
                if (itm.data instanceof Array)
                    line = this.profoundToSourceMap(map, line, itm.data);
else {
                    if (itm.info != null) {
                        map.addMapping({
                            'generated': {
                                'line': line,
                                'column': 0
                            },
                            'source': itm.info.file,
                            'original': {
                                'line': itm.info.line,
                                'column': itm.info.col
                            },
                            'name': 'plop'
                        });
                    } else {
                        map.addMapping({
                            generated: {
                                line: line,
                                column: 0
                            }
                        });
                    }
                    line += itm.data.split('\n').length - 1;
                }
            }
            return (line);
        };

        BufferManager.prototype.toSourceMap = function (side, name, filename) {
            var map = new sm.SourceMapGenerator({ file: 'out.js' });
            var generatedLine = 1;
            var buff = this.get(side, name, false);

            if (typeof buff !== 'undefined') {
                for (var i = 0; i < buff.data.length; i++) {
                    var elm = buff.data[i];

                    if (elm.data instanceof Array) {
                        generatedLine = this.profoundToSourceMap(map, generatedLine, elm.data);
                    } else {
                        if (elm.info != null) {
                            map.addMapping({
                                generated: {
                                    line: generatedLine,
                                    column: 0
                                },
                                source: elm.info.file,
                                original: {
                                    line: elm.info.line,
                                    column: elm.info.col
                                },
                                name: 'plop'
                            });
                        } else {
                            map.addMapping({
                                generated: {
                                    line: generatedLine,
                                    column: 0
                                }
                            });
                        }
                        generatedLine += elm.data.split('\n').length - 1;
                    }
                }
            }
            return (map);
        };

        //output generation
        BufferManager.prototype.profoundToString = function (data) {
            var output = '';

            data.forEach(function (elm) {
                if (elm.data instanceof Array)
                    output += this.profoundToString(elm.data);
else
                    output += elm.data;
            });
            return (output);
        };

        BufferManager.prototype.toString = function (side, name) {
            var output = '';
            var buff = this.get(side, name, false);
            var _this = this;

            if (typeof buff !== 'undefined') {
                buff.data.forEach(function (elm) {
                    if (elm.data instanceof Array)
                        output += _this.profoundToString(elm.data);
else
                        output += elm.data;
                });
            }
            return (output);
        };

        BufferManager.prototype.dump = function () {
            console.log('##################################');
            for (var i = 0; i < this.buffers.length; i++) {
                console.log('[' + this.buffers[i].name + '][' + this.buffers[i].side + '] = ');
                for (var j = 0; j < this.buffers[i].data.length; j++) {
                    console.log('\t\t[' + j + ']', this.buffers[i].data[j]);
                }
                console.log('------------------------------');
            }
            console.log('##################################\n');
        };
        return BufferManager;
    })();

    /*
    **	Nodes
    */
    var Element = (function () {
        function Element(parser, name, attrs, filename) {
            this.line = parser.getCurrentLineNumber();
            this.location = {
                line: parser.getCurrentLineNumber(),
                col: parser.getCurrentColumnNumber(),
                file: filename
            };
            this.start(parser, name, attrs);
        }
        Element.prototype.start = function (parser, name, attrs) {
            if (parser.currentElement) {
                parser.currentElement.processText(parser);
                parser.currentElement.children.push(this);
            }
            this.parent = parser.currentElement;
            this.children = [];
            this.name = name;
            this.attrs = attrs;
            this.text = '';
            this.outputType = '.js';
            parser.currentElement = this;
        };

        Element.prototype.stop = function (parser, name) {
            this.processText(parser);
            parser.currentElement = this.parent;
        };

        Element.prototype.prepare = function (parser) {
            this.children.forEach(function (item) {
                item.prepare(parser);
            });
        };

        Element.prototype.processElement = function (parser, name, attrs) {
            if (this.elementRules.hasOwnProperty(name))
                return new (this.elementRules[name])(parser, name, attrs, this.location.file);
            parser.error('Element not found <' + name + '>');
        };

        Element.prototype.processText = function (parser) {
            this.text += parser.currentText;
            parser.currentText = '';
        };

        Element.prototype.print = function (buffers, side) {
            this.printHeader(buffers, side);
            this.printBody(buffers, side);
            this.printFooter(buffers, side);
        };

        Element.prototype.printHeader = function (buffers, side) {
        };

        Element.prototype.printBody = function (buffers, side) {
            this.children.forEach(function (item) {
                item.print(buffers, side);
            });
        };

        Element.prototype.printFooter = function (buffers, side) {
        };

        Element.prototype.getLocation = function (offsetLine, offsetColumn) {
            var location = this.location;

            location.line += offsetLine;
            location.col += offsetColumn;
            return (location);
        };
        return Element;
    })();

    var Include = (function (_super) {
        __extends(Include, _super);
        function Include(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'include';
            this.parser = parser;
            this.preparedBuffers = new BufferManager();
        }
        Include.prototype.prepare = function (parser) {
            var element = this;
            var filename = getPath(this.attrs.href);
            var extension = '.' + filename.split('.').pop();

            console.log('# including ' + this.attrs.href);
            if (!filename) {
                console.log('// include ' + this.attrs.href + ' not found!');
            } else {
                if (extension == '.wk') {
                    parser.wait(this);
                    this.outputType = '.wk';
                    doParseDocument(filename, function (buffers) {
                        element.preparedBuffers = buffers;
                        parser.dequeue(element);
                    });
                } else {
                    parser.wait(this);
                    this.outputType = extension;
                    var _this = this;
                    fs.readFile(filename, function (err, data) {
                        var res = '';

                        res += '/* include ' + element.attrs.href + '*/\n';
                        res += data.toString();

                        element.preparedBuffers.write(SideType.BOTH, extension, res, null, false);

                        parser.dequeue(element);
                    });
                }
            }
        };

        Include.prototype.printBody = function (buffers, side) {
            buffers.merge(side, this.preparedBuffers, this.location.line);
        };
        return Include;
    })(Element);

    var On = (function (_super) {
        __extends(On, _super);
        function On(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'on';
        }
        On.prototype.printBody = function (buffers, side) {
            var begin = 'on_' + this.attrs.id + ': { value: function(context, model, query, result) {';
            var middle = this.text;
            var end = '}},\n';

            if (hint(sanitize(middle)) == false)
                printHintErrors(hint.data().errors, this.location);
            buffers.write(side, this.outputType, begin, null, false);
            buffers.write(side, this.outputType, middle, this.location, true);
            buffers.write(side, this.outputType, end, null, false);
        };
        return On;
    })(Element);

    var Property = (function (_super) {
        __extends(Property, _super);
        function Property(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'property';
        }
        Property.prototype.printBody = function (buffers, side) {
            if (!this.attrs.hasOwnProperty('id'))
                throw new Error('properties must have an id!');

            var data = '';

            data += 'application.addProperty(\"';
            data += this.attrs.id;
            data += '\", \"';
            data += this.text;
            data += '\");\n';

            buffers.write(side, this.outputType, data, null, false);
        };
        return Property;
    })(Element);

    var Script = (function (_super) {
        __extends(Script, _super);
        function Script(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'script';
        }
        Script.prototype.printBody = function (buffers, side) {
            var data = this.text;

            if (hint(sanitize(data)) == false)
                printHintErrors(hint.data().errors, this.location);
            buffers.write(side, this.outputType, data, this.location, true);
        };
        return Script;
    })(Element);

    var Stylesheet = (function (_super) {
        __extends(Stylesheet, _super);
        function Stylesheet(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'stylesheet';
            this.type = 'css';
            if (this.attrs.hasOwnProperty('type') && styleSheetEngine.hasOwnProperty(this.attrs.type))
                this.outputType = '.' + this.attrs.type;
        }
        Stylesheet.prototype.printBody = function (buffers, side) {
            var data = '';

            data += this.text;

            buffers.write(side, this.outputType, data, null, false);
        };
        return Stylesheet;
    })(Element);

    var Template = (function (_super) {
        __extends(Template, _super);
        function Template(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'template';
            this.templateName = 'square';
            if (this.attrs.hasOwnProperty('system') && templateEngine.hasOwnProperty(this.attrs.system))
                this.templateName = this.attrs.system;
        }
        Template.prototype.printHeader = function (buffers, side) {
            if (this.attrs.hasOwnProperty('id')) {
                if (Handler.prototype.isPrototypeOf(this.parent))
                    throw new Error('Embedded templates have no id!');
                var data = '';

                data += 'application.addTemplate(\"';
                data += this.attrs.id;
                data += '\", Object.create(Template.prototype, {\n';

                buffers.write(side, this.outputType, data, null, false);
            } else {
                if (!Handler.prototype.isPrototypeOf(this.parent))
                    throw new Error('Stand-alone templates must have an id!');
            }
        };

        Template.prototype.printBody = function (buffers, side) {
            var data = '';

            data += 'on_render';
            data += ': { value:\n';

            var cleaned = this.text.replace(/\s+/g, ' ');
            cleaned = cleaned.replace(/\"/g, '\\\"');

            var bufferString = new Buffer(cleaned);
            var streamBuff = new sbuff.WritableStreamBuffer();

            var templateCompiler = new templateEngine[this.templateName].parse(bufferString);
            templateCompiler.print(streamBuff, '');

            data += streamBuff.getContentsAsString("utf8");
            data += '},\n';

            buffers.write(side, this.outputType, data, null, false);
        };

        Template.prototype.printFooter = function (buffers, side) {
            var data = '';
            if (this.attrs.hasOwnProperty('id')) {
                data += '\n}));\n\n';

                buffers.write(side, this.outputType, data, null, false);
            }
        };
        return Template;
    })(Element);

    var Client = (function (_super) {
        __extends(Client, _super);
        function Client(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {
                handler: Handler,
                include: Include,
                on: On,
                property: Property,
                script: Script,
                stylesheet: Stylesheet,
                template: Template
            };
            this.name = 'client';
        }
        Client.prototype.print = function (buffers, side) {
            if (options.client || (!options.client && !options.server))
                Element.prototype.print.call(this, buffers, SideType.CLIENT);
        };
        return Client;
    })(Element);

    var Handler = (function (_super) {
        __extends(Handler, _super);
        function Handler(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {
                on: On,
                bind: Bind,
                template: Template
            };
            this.name = 'handler';
        }
        Handler.prototype.printHeader = function (buffers, side) {
            var data = '';

            data += 'application.addHandler(\"';
            data += this.attrs.url;
            data += '\", Object.create(Handler.prototype, {\n';
            data += 'url : { value: \"';
            data += this.attrs.url;
            data += '\"},\n';

            if (this.attrs.type) {
                data += 'contentType : { value: \"';
                data += this.attrs.type;
                data += '\"},\n';
            }

            buffers.write(side, this.outputType, data, null, false);
        };

        Handler.prototype.printFooter = function (buffers, side) {
            var data = '';

            data += '\n}));\n\n';

            buffers.write(side, this.outputType, data, null, false);
        };
        return Handler;
    })(Element);

    var Bind = (function (_super) {
        __extends(Bind, _super);
        function Bind(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {};
            this.name = 'bind';
        }
        Bind.prototype.printBody = function (buffers, side) {
            var data = '';

            data += 'application.addObserver(' + this.attrs.data + ', ' + this.attrs.with + ');\n';

            buffers.write(side, this.outputType, data, null, false);
        };
        return Bind;
    })(Element);

    var Server = (function (_super) {
        __extends(Server, _super);
        function Server(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {
                handler: Handler,
                include: Include,
                on: On,
                property: Property,
                script: Script,
                stylesheet: Stylesheet,
                template: Template
            };
            this.name = 'server';
        }
        Server.prototype.print = function (buffers, side) {
            if (options.server || (!options.client && !options.server))
                Element.prototype.print.call(this, buffers, SideType.SERVER);
        };
        return Server;
    })(Element);

    var Application = (function (_super) {
        __extends(Application, _super);
        function Application(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {
                client: Client,
                handler: Handler,
                include: Include,
                property: Property,
                server: Server,
                script: Script,
                stylesheet: Stylesheet,
                template: Template
            };
            this.name = 'application';
        }
        return Application;
    })(Element);

    var Roots = (function (_super) {
        __extends(Roots, _super);
        function Roots(parser, name, attrs, filename) {
            _super.call(this, parser, name, attrs, filename);
            this.elementRules = {
                application: Application
            };
            this.name = 'roots';
        }
        return Roots;
    })(Element);

    /*
    ** Parse Arguments
    */
    function doParseArguments(options) {
        var argv = require('optimist').alias('c', 'client').alias('s', 'server').alias('v', 'version').boolean(['server', 'client', 'version']).string('o', 'i').describe('c', 'compile for client').describe('s', 'compile for server').describe('i', 'include directory').describe('v', 'print the current version').describe('o', 'output basename').usage('$0' + ' version ' + version).demand('_').argv;

        options.server = argv.server;
        options.client = argv.client;

        if (argv.i) {
            if (argv.i instanceof Array)
                argv.i.forEach(function (elm) {
                    options.includes.push(elm);
                });
else
                options.includes.push(argv.i);
        }
        if (argv.v) {
            console.log('version: ' + version);
        }
        if (argv.o)
            options.output = (argv.o instanceof Array) ? (argv.o.splice(-1)) : (argv.o);

        argv._.forEach(function (elm) {
            options.inputs.push(elm);
        });
    }

    /*
    ** parsing entry point and utils
    */
    function doNextDocument() {
        if (options.inputs.length) {
            doParseDocument(options.inputs.shift(), doNextDocument);
        }
    }

    function doParseDocument(filename, callback) {
        var parser = new expat.Parser('UTF-8');
        parser.currentElement = null;
        parser.currentText = '';

        parser.roots = new Roots(parser, 'roots', null, filename);

        parser.filename = filename;
        parser.elements = [parser];
        parser.wait = function (element) {
            this.elements.push(element);
        };
        parser.dequeue = function (element) {
            var index = this.elements.indexOf(element);
            if (index < 0)
                console.log('>>>> DEQUEUE UNKNOWN ELEMENT');
            this.elements.splice(index, 1);
            if (this.elements.length == 0) {
                var buffers = new BufferManager();
                this.currentElement.print(buffers, SideType.BOTH);

                if (callback)
                    callback(buffers);
            }
        };
        parser.error = function (e) {
            console.log(parser.filename + ':' + parser.getCurrentLineNumber() + ': error:' + e);
        };
        parser.addListener('error', function (e) {
            console.log(parser.filename + ':' + parser.getCurrentLineNumber() + ': error:' + e);
        });
        parser.addListener('startElement', function (name, attrs) {
            this.currentElement.processElement(parser, name, attrs, filename);
        });
        parser.addListener('endElement', function (name) {
            this.currentElement.stop(parser, name);
        });
        parser.addListener('text', function (s) {
            this.currentText += s;
        });
        parser.addListener('end', function () {
            this.currentElement.prepare(parser);
            parser.dequeue(parser);
        });

        console.log('# parsing ' + parser.filename);
        parser.input = fs.createReadStream(parser.filename);
        parser.input.pipe(parser);
    }

    function getPath(filename) {
        var i, c = options.includes.length, path, folder;
        for (i = 0; i < c; i += 1) {
            folder = options.includes[i];
            try  {
                path = makePath(folder, filename);
                if (path) {
                    return path;
                }
            } catch (unused) {
                continue;
            }
        }
    }

    function makePath(rootpath, filename) {
        var length = rootpath.length, path = filename;
        if (length) {
            if (rootpath.charAt(length - 1) != '/') {
                path = rootpath + '/' + filename;
            } else {
                path = rootpath + filename;
            }
        }
        return fs.realpathSync(path);
    }

    function checkWebKoolWkFileExistence() {
        try  {
            var path = fs.realpathSync('./.webkool.wk');
        } catch (e) {
            var data = fs.readFileSync(__dirname + '/../sources/templates/webkool.wk');
            fs.writeFileSync('./.webkool.wk', data);
        }
    }

    function getDataFromSourceMap(sourceMap, side, type) {
        if (typeof sourceMap[type] === 'undefined' || typeof sourceMap[type][side] === 'undefined')
            return ('');
        return (JSON.stringify(sourceMap[type][side].toStringWithSourceMap({ file: ['.webkool.wk'] }).map));
    }

    function createFilesForSide(side, buffers, name) {
        if (side == SideType.BOTH) {
            createFilesForSide(SideType.SERVER, buffers, ((name.length == 0) ? ('') : (name + '.')) + 'server');
            createFilesForSide(SideType.CLIENT, buffers, ((name.length == 0) ? ('') : (name + '.')) + 'client');
        } else {
            var buff = buffers.getBuffers();
            for (var i = 0; i < buff.length; i++) {
                if (buff[i].side == side && (buff[i].name == '.js' || buff[i].name == '.css')) {
                    var fileName = name + buff[i].name;
                    var outputStream = fs.createWriteStream(fileName);
                    var outputStreamMap = fs.createWriteStream(fileName + '.map');

                    var txt = buffers.toString(side, buff[i].name);
                    var sourceMap = buffers.toSourceMap(side, buff[i].name, 'index.wk');

                    console.log('#saving in file ' + fileName);
                    console.log('#saving in file ' + fileName + '.map');
                    outputStream.write(txt);

                    outputStreamMap.write(sourceMap.toString());
                }
            }
        }
    }

    function joinBuffers(side, buffers) {
        if (side == SideType.BOTH) {
            joinBuffers(SideType.SERVER, buffers);
            joinBuffers(SideType.CLIENT, buffers);
        } else {
            for (var eng in styleSheetEngine) {
                if (eng != 'css') {
                    var streamBuff = new sbuff.WritableStreamBuffer();
                    var inp = buffers.toString(side, '.' + eng);

                    if (inp != '') {
                        styleSheetEngine[eng].compile(inp, streamBuff);
                        var line = buffers.get(side, '.css', true).data.length;
                        buffers.write(side, '.css', streamBuff.getContentsAsString("utf8"), null, false);
                    }
                }
            }

            if (side == SideType.SERVER) {
                var line = buffers.get(SideType.SERVER, '.js', true).data.length;
                buffers.write(SideType.SERVER, '.js', '\napplication.start();\n', null, false);
            }
        }
    }

    function run() {
        //feed the option object with the command line;
        doParseArguments(options);

        //create a .webkool.wk file if it doesn't exist.
        checkWebKoolWkFileExistence();

        //begin the parsing of .webkool.wk
        doParseDocument('.webkool.wk', function (initialBuffers) {
            var _buffers = initialBuffers;

            //parse the entry point (index.wk for example)
            doParseDocument(options.inputs.shift(), function (buffers) {
                _buffers.merge(SideType.BOTH, buffers, 0);

                //process some operation over buffer
                joinBuffers(SideType.BOTH, _buffers);

                if (options.client)
                    createFilesForSide(SideType.CLIENT, _buffers, (options.output.length == 0 ? 'client' : options.output));
                if (options.server)
                    createFilesForSide(SideType.SERVER, _buffers, (options.output.length == 0 ? 'server' : options.output));
                if ((options.server && options.client) || (!options.server && !options.client))
                    createFilesForSide(SideType.BOTH, _buffers, options.output);
            });
        });
    }
    Webkool.run = run;
})(Webkool || (Webkool = {}));

Webkool.run();
